argo-cd:
  fullnameOverride: argocd
  crds:
    install: true
    annotations:
      argocd.argoproj.io/sync-wave: "-1"

  global:
    domain: argocd.example.com
    logging:
      format: json

  configs:
    # General Argo CD configuration
    ## Ref: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/argocd-cm.yaml
    cm:
      url: http://argocd.example.com
      # -- Create the argocd-cm configmap for [declarative setup]
      exec.enabled: "true"
      resource.customizations.health.argoproj.io_Application: |
        hs = {}
        hs.status = "Progressing"
        hs.message = ""
        if obj.status ~= nil then
          if obj.status.health ~= nil then
            hs.status = obj.status.health.status
            if obj.status.health.message ~= nil then
              hs.message = obj.status.health.message
            end
          end
        end
        return hs  
      # Must explicitly enable helm to support helmCharts property in kustomization.yaml
      kustomize.buildOptions: "--load-restrictor LoadRestrictionsNone --enable-helm"

      # Ignore differences for commonly troublesome webhooks properties
      resource.customizations.ignoreDifferences.admissionregistration.k8s.io_ValidatingWebhookConfiguration:
        |
        jqPathExpressions:
          - ".webhooks[]?.clientConfig.caBundle"
          - ".webhooks[]?.failurePolicy"
      resource.customizations.ignoreDifferences.admissionregistration.k8s.io_MutatingWebhookConfiguration:
        |
        jqPathExpressions:
          - ".webhooks[]?.clientConfig.caBundle"
          - ".webhooks[]?.failurePolicy"
          
      # Define resource exclusions
      resource.exclusions: |
        - apiGroups:
            - cilium.io
          kinds:
            - CiliumIdentity
          clusters:
            - "*"
          

    params:
      server.insecure: true

    cmp:
      create: true
      plugins:
        envsubst:
          init:
            command: ["sh", "-c"]
            args:
              [
                "kustomize build . --load-restrictor LoadRestrictionsNone -o raw-kustomization.yaml",
              ]
          generate:
            command: ["sh", "-c"]
            args:
              [
                "envsubst < raw-kustomization.yaml > processed-kustomization.yaml && cp processed-kustomization.yaml /dev/stdout",
              ]
          discover:
            fileName: "kustomization.*"

  ## Repo Server
  repoServer:
    autoscaling:
      enabled: true
      minReplicas: 1      
    volumes:
      - name: custom-tools
        emptyDir: {}
      - name: cmp-plugin
        configMap:
          name: argocd-cmp-cm

    initContainers:
      - name: download-tools
        image: golang:1.21.6-alpine
        command: [sh, -c]
        args:
          - apk add git && go install github.com/drone/envsubst/cmd/envsubst@v1.0.3 && mv $GOPATH/bin/envsubst /custom-tools/
        volumeMounts:
          - mountPath: /custom-tools
            name: custom-tools

    extraContainers:
      - name: envsubst
        command: [/var/run/argocd/argocd-cmp-server]
        image: quay.io/argoproj/argocd:v2.11.7
        securityContext:
          runAsNonRoot: true
          runAsUser: 999
        volumeMounts:
          - mountPath: /var/run/argocd
            name: var-files
          - mountPath: /home/argocd/cmp-server/plugins
            name: plugins
          - mountPath: /tmp
            name: tmp

          # Register plugins into sidecar
          - mountPath: /home/argocd/cmp-server/config/plugin.yaml
            subPath: envsubst.yaml
            name: cmp-plugin

          # Mount tools into $PATH
          - name: custom-tools
            subPath: envsubst
            mountPath: /usr/local/bin/envsubst

  redis-ha:
    enabled: true
    serviceMonitor:
    # -- Deploy metrics service
      enabled: false  

  controller:
    replicas: 1

  server:
    autoscaling:
      enabled: true
      minReplicas: 2
    service:
      type: LoadBalancer 

  applicationSet:
    replicas: 1
